class Node:
    def __init__(self, value):
        self.value = value
        self.next = None
        self.prev = None

# Lista Duplamente Encadeada
class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert(self, value):
        new_node = Node(value)
        new_node.next = self.head
        if self.head:
            self.head.prev = new_node
        self.head = new_node

    def print_list(self):
        temp = self.head
        while temp:
            print(temp.value, end=" <-> ")
            temp = temp.next
        print("None")

    def search(self, value):
        temp = self.head
        while temp:
            if temp.value == value:
                return temp
            temp = temp.next
        return None

    def remove(self, value):
        temp = self.head
        while temp:
            if temp.value == value:
                if temp.prev:
                    temp.prev.next = temp.next
                if temp.next:
                    temp.next.prev = temp.prev
                if temp == self.head:
                    self.head = temp.next
                return
            temp = temp.next

    def insert_end(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node
        new_node.prev = temp

    def insert_sorted(self, value):
        new_node = Node(value)
        if not self.head or self.head.value >= value:
            new_node.next = self.head
            if self.head:
                self.head.prev = new_node
            self.head = new_node
            return
        temp = self.head
        while temp.next and temp.next.value < value:
            temp = temp.next
        new_node.next = temp.next
        if temp.next:
            temp.next.prev = new_node
        temp.next = new_node
        new_node.prev = temp

# Lista Duplamente Encadeada Circular
class CircularDoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            self.head.next = self.head
            self.head.prev = self.head
            return
        tail = self.head.prev
        tail.next = new_node
        new_node.prev = tail
        new_node.next = self.head
        self.head.prev = new_node

    def print_list(self):
        if not self.head:
            print("Lista vazia")
            return
        temp = self.head
        while True:
            print(temp.value, end=" <-> ")
            temp = temp.next
            if temp == self.head:
                break
        print("(volta ao in√≠cio)")

    def search(self, value):
        if not self.head:
            return None
        temp = self.head
        while True:
            if temp.value == value:
                return temp
            temp = temp.next
            if temp == self.head:
                break
        return None

    def remove(self, value):
        if not self.head:
            return
        temp = self.head
        while True:
            if temp.value == value:
                if temp.next == temp:
                    self.head = None
                else:
                    temp.prev.next = temp.next
                    temp.next.prev = temp.prev
                    if temp == self.head:
                        self.head = temp.next
                return
            temp = temp.next
            if temp == self.head:
                break

    def insert_end(self, value):
        self.insert(value)

    def insert_sorted(self, value):
        new_node = Node(value)
        if not self.head:
            self.head = new_node
            self.head.next = self.head
            self.head.prev = self.head
            return
        temp = self.head
        while temp.next != self.head and temp.next.value < value:
            temp = temp.next
        new_node.next = temp.next
        new_node.prev = temp
        temp.next.prev = new_node
        temp.next = new_node
        if self.head.value > value:
            self.head = new_node

    def print_reverse(self):
        if not self.head:
            print("Lista vazia")
            return
        temp = self.head.prev
        while True:
            print(temp.value, end=" <-> ")
            temp = temp.prev
            if temp == self.head.prev:
                break
        print("(volta ao fim)")
